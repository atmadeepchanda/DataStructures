#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct Queue
{
    int front, rear, size;
    unsigned capacity;
    int* array;
};

// function to create a queue of given capacity.
// It initializes size of queue as 0
struct Queue* createQueue(unsigned capacity)
{
    struct Queue* queue = (struct Queue*) malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;  // This is important, see the enqueue
    queue->array = (int*) malloc(queue->capacity * sizeof(int));
    return queue;
}

// Queue is full when size becomes equal to the capacity
int isFull(struct Queue* queue)
{  return (queue->size == queue->capacity);  }

// Queue is empty when size is 0
int isEmpty(struct Queue* queue)
{  return (queue->size == 0); }

// Function to add an item to the queue.
// It changes rear and size
void enqueue(struct Queue* queue, int item)
{
    if (isFull(queue))
        return;
    queue->rear = (queue->rear + 1)%queue->capacity;
    queue->array[queue->rear] = item;
    queue->size = queue->size + 1;
    //printf("%d enqueued to queue\n", item);
}

// Function to remove an item from queue.
// It changes front and size
void dequeue(struct Queue* queue)
{
    if (isEmpty(queue))
        return;
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1)%queue->capacity;
    queue->size = queue->size - 1;
    //return item;
}

// Function to get front of queue
int front(struct Queue* queue)
{
    //if (isEmpty(queue))
      //  return INT_MIN;
    return queue->array[queue->front];
}

// Function to get rear of queue
int rear(struct Queue* queue)
{
    //if (isEmpty(queue))
        //return INT_MIN;
    return queue->array[queue->rear];
}




void createGraph(int adj[500][500],int size)
{
    int i,s,e;
    printf("\nEnter the edges of the graph\n");
    printf("\nEnter -1 -1 to quit\n");
    for(i=1;i<=(size*(size-1));i++)//use size*(size-1)/2 for undirected graphs
    {
        scanf("%d %d",&s,&e);
        if((s==-1)&&(e==-1))
           break;
        printf("\n");
        adj[s][e]=1;
        //adj[e][s]=1;  remove the backslashes for undirected graphs
    }
}



void BFS(int adj[500][500],int* visited,struct Queue* queue,int p)
{
    int n,i,f;
    printf("\nEnter starting vertex\n");
    scanf("%d",&n);
    visited[n]=1;
    enqueue(queue,n);
    while(!isEmpty(queue))
    {
        f=front(queue);
        printf("%d ",f);
        for(i=0;i<p;i++)
        {
            if((adj[f][i])&&(!visited[i]))
            {
                enqueue(queue,i);
                visited[i]=1;

            }

        }
        dequeue(queue);
    }
}

int main()
{
    int n;
    printf("\nEnter the no of vertices\n");
    scanf("%d",&n);
    int adj[500][500]={0};
    int visited[500]={0};
    createGraph(adj,n);
    struct Queue* queue = createQueue(n);
    BFS(adj,visited,queue,n);


}















