

int isPossible(int** graph,int n,int v,int c,int* vcolor,int* visited){
    
    for(int i=0;i<n;i++){
        if(graph[v][i] && visited[i] && (c==vcolor[i]) ){
            return 0;
        }
    }
    return 1;
}


void color(int** graph,int n,int e,int v,int* vcolor,int* visited){
    visited[v]=1;
    for(int c=1;c<=n;c++){
        if(isPossible(graph,n,v,c,vcolor,visited)){
            vcolor[v]=c;
            for(int i=0;i<n;i++){
                if(graph[v][i] && !visited[i]){
                    color(graph,n,e,i,vcolor,visited);
                    
                }
            }
            
            return;
        }
    }
}



int main() {
	//code
	int t,n,e,m,v1,v2;
	cin>>t;
	while(t--){
	    cin>>n;
	    cin>>m;
	    cin>>e;
	    int** graph=new int*[n];
	    for(int i=0;i<n;i++){
	        graph[i]=new int[n]();
	    }
	    
	    for(int i=0;i<e;i++){
	        cin>>v1>>v2;
	        graph[v1-1][v2-1]=1;
	        graph[v2-1][v1-1]=1;
	        
	    }
	    
	   
	    
	    
	    int* visited=new int[n]();
	    int* vcolor=new int[n]();
	    for(int i=0;i<n;i++){
	        if(!visited[i]){
	            color(graph,n,e,i,vcolor,visited);
	        }
	    }
	    
	    int high=0;
	    for(int i=0;i<n;i++){
	        if(vcolor[i]>high){
	            high=vcolor[i];
	        }
	    }
	    
	   
	    
	    if(high<=m){
	        cout<<"1"<<endl;

	    }
	    
	    else{
	        cout<<"0"<<endl;
	    }
	    
	}
	return 0;
}
