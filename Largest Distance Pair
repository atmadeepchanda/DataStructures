/*
You are given a list of integers a and b of the same length. Return the maximum value for all 0 ≤ i < j < n:

|a[i] - a[j]| + |b[i] - b[j]| + |i - j|
Constraints

n ≤ 100,000 where n is the length of nums
Example 1
Input

a = [1, 3, 9, 5]
b = [2, 3, 6, 3]
Output

14
Explanation

We can have i = 0 and j = 2 and get abs(1 - 9) + abs(2 - 6) + abs(0 - 2)

if the problem seems difficult, check out a simpler version of this problem at   https://www.geeksforgeeks.org/maximum-value-arri-arrj-j/
Now Proceed to the solution below

*/

#include "solution.hpp"
using namespace std;


class Solution {
    public:
    int solve(vector<int>& a, vector<int>& b) {
        // Write your code here
        int n=a.size();
        if(n==0){
            return 0;
        }
        int* arr=new int[n];
        int mx=INT_MIN;
        int mn=INT_MAX;
        int ans=0;
        
        //case 1 (a[i]+b[i]+i)-(a[j]+b[j]+j) has to be maximised
        for(int i=0;i<n;i++){
            arr[i]=a[i]+b[i]+i;
            mx=max(mx,arr[i]);
            mn=min(mn,arr[i]);
        }
        ans=max(ans,mx-mn);
        mx=INT_MIN;
        mn=INT_MAX;
        
        //case 2 (a[i]+b[i]-i)-(a[j]+b[j]-j) has to be maximised
        for(int i=0;i<n;i++){
            arr[i]=a[i]+b[i]-i;
            mx=max(mx,arr[i]);
            mn=min(mn,arr[i]);
        }
        ans=max(ans,mx-mn);
        mx=INT_MIN;
        mn=INT_MAX;
        
        //case 3 (a[i]-b[i]+i)-(a[j]-b[j]+j) has to be maximised
        for(int i=0;i<n;i++){
            arr[i]=a[i]-b[i]+i;
            mx=max(mx,arr[i]);
            mn=min(mn,arr[i]);
        }
        ans=max(ans,mx-mn);
        mx=INT_MIN;
        mn=INT_MAX;
        
        //case 4 (a[i]-b[i]-i)-(a[j]-b[j]-j) has to be maximised
        for(int i=0;i<n;i++){
            arr[i]=a[i]-b[i]-i;
            mx=max(mx,arr[i]);
            mn=min(mn,arr[i]);
        }
        ans=max(ans,mx-mn);
        delete [] arr;
        return ans;
    }
};
