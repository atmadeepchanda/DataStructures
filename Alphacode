#include<bits/stdc++.h>
using namespace std;

int flag=0;

void num_codesdpi(int* arr,int* dp,int n) {   //Dynamic programming iterative




	 for(int i=2;i<=n;i++){
	 int smallOutput = dp[i - 1];

	 if(((arr[i-2]*10+arr[i-1])>26)&&(arr[i-1]>0)){
        dp[i]=smallOutput;
        //return smallOutput;
	 }

	 else if(((arr[i-2]*10+arr[i-1])>26)&&(arr[i-1]==0)){
        flag=-1;
        dp[i]=0;
        //return 0;
	 }

	 else if(((arr[i-2]*10+arr[i-1])<=26)&&((arr[i-2]*10+arr[i-1])==0)){
        flag=-1;
        dp[i]=0;
        //return 0;
	 }

	 else if(((arr[i-2]*10+arr[i-1])<=26)&&(arr[i-1]==0)&&(arr[i-2]!=0)){
        dp[i]=dp[i-2];
        //return dp[n];
        //return num_codesdp(arr,n-2);
	 }

	 else if(((arr[i-2]*10+arr[i-1])<=26)&&(arr[i-1]!=0)&&(arr[i-2]==0)){
        dp[i]=smallOutput;
        //return smallOutput;
	 }

	 else if(((arr[i-2]*10+arr[i-1])<=26)&&(arr[i-1]!=0)&&(arr[i-2]!=0)){
        dp[i]=smallOutput+dp[i-2];
        //return dp[n];
        //return smallOutput + num_codesdp(arr,n-2,dp);
	 }

	 }
}


int num_codesdp(int* arr, int n,int* dp) {   //Dynamic programming recursive

	 if(dp[n]>0)
        return dp[n];

	 if (n == 1) {
		 return 1;
	 }
	 if (n == 0) {
		 return 1;
	 }
	 int smallOutput = num_codesdp(arr, n - 1,dp);

	 if(((arr[n-2]*10+arr[n-1])>26)&&(arr[n-1]>0)){
        dp[n]=smallOutput;
        return smallOutput;
	 }

	 if(((arr[n-2]*10+arr[n-1])>26)&&(arr[n-1]==0)){
        flag=-1;
        dp[n]=0;
        return 0;
	 }

	 if(((arr[n-2]*10+arr[n-1])<=26)&&((arr[n-2]*10+arr[n-1])==0)){
        flag=-1;
        dp[n]=0;
        return 0;
	 }

	 if(((arr[n-2]*10+arr[n-1])<=26)&&(arr[n-1]==0)&&(arr[n-2]!=0)){
        dp[n]=num_codesdp(arr,n-2,dp);
        return dp[n];
        //return num_codesdp(arr,n-2);
	 }

	 if(((arr[n-2]*10+arr[n-1])<=26)&&(arr[n-1]!=0)&&(arr[n-2]==0)){
        dp[n]=smallOutput;
        return smallOutput;
	 }

	 if(((arr[n-2]*10+arr[n-1])<=26)&&(arr[n-1]!=0)&&(arr[n-2]!=0)){
        dp[n]=smallOutput+num_codesdp(arr,n-2,dp);
        return dp[n];
        //return smallOutput + num_codesdp(arr,n-2,dp);
	 }



}

int num_codes(int* arr, int n) {  // Using normal recursion and array
	 if (n == 1) {
		 return 1;
	 }
	 if (n == 0) {
		 return 1;
	 }
	 int smallOutput = num_codes(arr, n - 1);

	 if(((arr[n-2]*10+arr[n-1])>26)&&(arr[n-1]>0)){
        return smallOutput;
	 }

	 if(((arr[n-2]*10+arr[n-1])>26)&&(arr[n-1]==0)){
        flag=-1;
        return 0;
	 }

	 if(((arr[n-2]*10+arr[n-1])<=26)&&((arr[n-2]*10+arr[n-1])==0)){
        flag=-1;
        return 0;
	 }

	 if(((arr[n-2]*10+arr[n-1])<=26)&&(arr[n-1]==0)&&(arr[n-2]!=0)){
        return num_codes(arr,n-2);
	 }

	 if(((arr[n-2]*10+arr[n-1])<=26)&&(arr[n-1]!=0)&&(arr[n-2]==0)){
        return smallOutput;
	 }

	 if(((arr[n-2]*10+arr[n-1])<=26)&&(arr[n-1]!=0)&&(arr[n-2]!=0)){
        return smallOutput + num_codes(arr,n-2);
	 }


}


long long alphaCode(long long n){  //Using normal recursion

    if(n<=9)
        return 1;

    long long smallOutput=alphaCode(n/10);
    //if((smallOutput==0)&&(flag==-1))
      //  return 0;
    if((n%100 > 26)&&(n%10>0)){
        return smallOutput;
    }

    if((n%100>26)&&(n%10==0)){
        flag=-1;
        return 0;
    }

    if((n%100<=26)&&(n%100==0)){
        flag=-1;
        return 0;
    }

    if((n%100<=26)&&(n%10==0)&&(((n/10)%10)!=0)){
        return alphaCode(n/100);
    }

    if((n%100<=26)&&(((n/10)%10)==0)&&(n%10!=0)){
        return smallOutput;
    }

    if((n%100<=26)&&(n%10!=0)&&(((n/10)%10)!=0)){
        return smallOutput + alphaCode(n/100);
    }
}

int main(){
    int n;
    //long long n;
   // cin >> n;
   // int c=0;

    int arr[]={1,0,0,1};
    //long long output = alphaCode(n);
    n=4;
    int* dp = new int[n+1];
    dp[0]=1;
    dp[1]=1;
    //for(int i=0;i<n+1;i++)
        //dp[i]=0;
    //memset(dp,0,sizeof(dp));
    //int output = num_codes(arr,n);
    //int output=num_codesdp(arr,n,dp);
    num_codesdpi(arr,dp,n);
    int output=dp[n];
    delete[] arr;
    cout << output;
}
