
//Print 1 if there is a negative edge cycle else print 0


#include <bits/stdc++.h>
using namespace std;

class Edge{
    public:
        int src;
        int dest;
        int weight;
};


int bellmanFord(Edge* arr,int e,int v){
    int* dist=new int[v];
    for(int i=1;i<v;i++){
        dist[i]=INT_MAX;
    }
    dist[0]=0;
    int* pred=new int[v];
    int flag=0;

    for(int j=1;j<=v-1;j++){
        for(int i=0;i<e;i++){
            if(dist[arr[i].src]+arr[i].weight<dist[arr[i].dest]){
                flag=1;
                dist[arr[i].dest]=dist[arr[i].src]+arr[i].weight;
                pred[arr[i].dest]=arr[i].src;
            }
        }
        if(!flag){
            break;
        }
        else{
            flag=0;
        }
    }
    
    for(int i=0;i<e;i++){
        if(dist[arr[i].src]+arr[i].weight<dist[arr[i].dest]){
            return 1;
        }
    }
    
    return 0;
}


int main() {
	//code
	int t;
	cin>>t;
	while(t--){
	    int v;
	    int e;
	    cin>>v>>e;
	    Edge* arr=new Edge[e];
	    int x,y,z;
	    for(int i=0;i<e;i++){
	        cin>>x>>y>>z;
	        arr[i].src=x;
	        arr[i].dest=y;
	        arr[i].weight=z;
	    }
	    
	    cout<< bellmanFord(arr,e,v)<<endl;
	    delete [] arr;
	    
	    
	    
	}
	return 0;
}
