//Right Threaded Binary Tree
//Make Sure to use the option 6 only once per execution
//Make sure to call convert function only after the above step
//Since further modifications are not being made currently use the option 6 and convert option only once
//All the above precautions are to be ensured to avoid crashing of the program amidst execution
//The other functions can be used as desired

#include<stdio.h>
#include<stdlib.h>

typedef struct TNodetype
{
	int data;
	int rthread;
	struct TNodetype* left;
	struct TNodetype* right;
}TNode;

TNode* getTNode(int data)
{
	TNode* ptr=(TNode*)malloc(sizeof(TNode));
	ptr->left=ptr->right=NULL;
	ptr->data=data;
	ptr->rthread=0;
	return ptr;
}

typedef struct LinkedList
{
	TNode* ldata;
	struct LinkedList* link;
}LNode;

LNode* getLNode(TNode* n)
{
    LNode* ptr=(LNode*)malloc(sizeof(LNode));
    ptr->ldata=n;
    ptr->link=NULL;
    return ptr;
}
void insertL(LNode** lhead ,TNode* data)
{
	LNode* ptr=getLNode(data);
	if(*lhead==NULL)
    	*lhead=ptr;
    else
    {
    	LNode* p=*lhead;
    	while(p->link)
    	p=p->link;
    	p->link=ptr;
    }
}

TNode* searchList(int dat,LNode* lhead)
{
    //if(!p)
      //  return p;
    LNode* q=lhead;
    while(dat!=((q->ldata)->data))
        q=q->link;
    if(q->link)
    return (q->link)->ldata;
    else
        {TNode* t=NULL;
    return t;
}}

void printList(LNode* lhead)
{
    while(lhead)
    {
        printf("%d  ", (lhead->ldata)->data);
        lhead=lhead->link;
    }
}


typedef struct Nodetype
{
    struct Nodetype* next;
    TNode* info;
}Node;



Node* getNode(TNode* n)
{
    Node* ptr=(Node*)malloc(sizeof(Node));
    ptr->info=n;
    ptr->next=NULL;
    return ptr;
}

void dequeue(Node** head)
{
    if(*head==NULL)
        printf("\nEmpty list\n");
    else
    {
        Node* p=*head;
        p=p->next;
        free(*head);
        (*head)=p;

    }

}

void enqueue(Node** head,TNode* data)
{
	Node* ptr=getNode(data);
	if(*head==NULL)
    	*head=ptr;
    else
    {
    	Node* p=*head;
    	while(p->next)
    	p=p->next;
    	p->next=ptr;
    }
}

void inorder(TNode* root,LNode** lhead)
{
	if(root==NULL)
		return;
	inorder(root->left,lhead);
	insertL(lhead,root);
	inorder(root->right,lhead);
}


void convert(TNode** root,Node** head,LNode* lhead)
{
	if(*root==NULL)
	return;
	enqueue(head,*root);
	while(*head)
	{
		TNode* p=(*head)->info;
		if(p->left)
			enqueue(head,p->left);
		if(p->right)
			enqueue(head,p->right);
        else{
            p->right=searchList(p->data,lhead);
            if(p->right)
                p->rthread=1;
        }
        dequeue(head);
	}
}




void insert(TNode** root,int n)
{

	if(*root == NULL){
		TNode* temp=getTNode(n);
		*root=temp;
	}
	else if((*root)->data<n)
		insert(&(*root)->right,n);
	else
		insert(&(*root)->left,n);
}

void inorder1(TNode* root)
{
	if(root==NULL)
		return;
	inorder1(root->left);
	printf("%d  ",root->data);
	inorder1(root->right);
}

void preorder(TNode* root)
{
	if(root==NULL)
		return;
	printf("%d  ",root->data);
	preorder(root->left);
	preorder(root->right);
}

void postorder(TNode* root)
{
	if(root==NULL)
		return;
	postorder(root->left);
	postorder(root->right);
	printf("%d  ",root->data);
}

void delete(TNode** root,int n)
{

	if(*root==NULL){
		printf("\nNode not found\n");
		return;
	}
	else if(n>(*root)->data)
		delete(&(*root)->right,n);
	else if(n<(*root)->data)
		delete(&(*root)->left,n);
	else
		{
		 if((*root)->left==NULL)
		{
			TNode* temp=*root;
			printf("\n%d  ",temp->data);
			*root=(*root)->right;
			free(temp);
		}
		else if((*root)->right==NULL)
		{
			TNode* temp=*root;
			printf("\n%d  ",temp->data);
			*root=(*root)->left;
			free(temp);
		}
		else
		{
		    TNode* p=*root;
		    printf("\n%d  ",p->data);
		    TNode* q=p;
		    p=p->right;
		    while(p->left){
                q=p;
                p=p->left;
		    }

            (*root)->data=p->data;


		if(q->right==p)
            q->right=p->right;
       else
            q->left=p->right;
		free(p);


		}


}
}

void inorderTraversalUsingRightThreadedTree(TNode** root)
{
    if(*root==NULL)
        return;
    TNode*  p=*root;
    while(p)
    {
        while(p->left)
            p=p->left;
        printf("%d  ",p->data);
        while(p->rthread==1)
        {
            p=p->right;
            printf("%d  ",p->data);
        }
        p=p->right;
    }

}


int main()
{
    TNode* root=NULL;
    Node* head=NULL;
    LNode* lhead=NULL;

    int i,n,d;
    while(1)
    {
        printf("\nEnter 1 to insert 2 to display 3 to delete 4 to convert 5 to prepare list of inorder 6 for inorder traversal using right threaded tree 7 to exit\n");
        scanf("%d",&i);
        switch(i)
        {
        case 1:
            printf("\nEnter the no to insert\n");
            scanf("%d",&n);
            insert(&root,n);
            break;
        case 2:
            inorder1(root);
            printf("\n");
            preorder(root);
            printf("\n");
            postorder(root);
            break;
        case 3:
            printf("\nEnter the value to delete\n");;
            scanf("%d",&d);
            delete(&root,d);
            break;
        case 4:
            printf("\nCONVERTED\n");
            convert(&root,&head,lhead);
            break;
        case 5:
            printf("\nCHECK\n");
            inorder(root,&lhead);
            printList(lhead);
            break;
        case 6:
            inorderTraversalUsingRightThreadedTree(&root);
            break;

        case 7:
            exit(1);
        default:
            printf("\nWrong Choice\n");


        }
    }
}
















